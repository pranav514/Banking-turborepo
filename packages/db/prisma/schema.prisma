// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String? @unique
  name String? 
  phonenumber String @unique
  password String
OnRampTransaction OnRampTransaction[]
Balance Balance[]
sentTransfers     p2pTransfer[]       @relation(name: "FromUserRelation")
receivedTransfers p2pTransfer[]       @relation(name: "ToUserRelation")

} 

model Merchant{
  id String @id @default(uuid())
  email String @unique
  name String?
  auth_type Auth
}
model OnRampTransaction {
  id        String    @id @default(uuid())
  status    OnRampStatus
  token     String       @unique
  provider  String?
  amount    Int
  startTime DateTime @default(now())
  userId    String
  user User   @relation(fields: [userId] , references: [id])

}

model Balance {
  id     String  @id @default(uuid())
  userId String  @unique
  amount Int
  locked Int?
  user   User @relation(fields: [userId], references: [id])

}
model p2pTransfer {
  id         String          @id @default(uuid())
  amount     Int
  timestamp  DateTime
  fromUserId String
  toUserId   String
  fromUser   User         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUser     User         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}
enum Auth{
  Google
  Github
}
enum OnRampStatus {
  Success
  Failure
  Processing
}